The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Import function from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testing area() method
---------------------
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Testing integer_validator() method
-----------------------------------
Valid integer:
    >>> bg.integer_validator("width", 10)

Invalid integer (string instead of int):
    >>> bg.integer_validator("width", "10")
    Traceback (most recent call last):
        ...
    TypeError: width must be an integer

Invalid integer (negative number):
    >>> bg.integer_validator("height", -5)
    Traceback (most recent call last):
        ...
    ValueError: height must be greater than 0

Invalid integer (zero):
    >>> bg.integer_validator("size", 0)
    Traceback (most recent call last):
        ...
    ValueError: size must be greater than 0

Testing integer_validator() with a string instead of an integer
-----------------------------------------------------------
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("width", "10")
    Traceback (most recent call last):
        ...
    TypeError: width must be an integer

Testing integer_validator() with a negative number
-------------------------------------------------
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("height", -5)
    Traceback (most recent call last):
        ...
    ValueError: height must be greater than 0

Testing integer_validator() with zero
--------------------------------------
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("size", 0)
    Traceback (most recent call last):
        ...
    ValueError: size must be greater than 0

    >>> bg.integer_validator("average")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

### **Test with a very large integer**  
    >>> bg.integer_validator("big_number", 999999999999999999999999999)
    
### **Test with a float (should fail)**  
    >>> bg.integer_validator("pi", 3.14)
    Traceback (most recent call last):
        ...
    TypeError: pi must be an integer

### **Test with NaN (should fail)**  
    >>> import math
    >>> bg.integer_validator("NaN", math.nan)
    Traceback (most recent call last):
        ...
    TypeError: NaN must be an integer

### **Test with a list (should fail)**  
    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: list must be an integer

### **Test with a tuple (should fail)**  
    >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
        ...
    TypeError: tuple must be an integer

### **Test with a dictionary (should fail)**  
    >>> bg.integer_validator("dictionary", {"key": 10})
    Traceback (most recent call last):
        ...
    TypeError: dictionary must be an integer

### **Test with None (should fail)**  
    >>> bg.integer_validator("none", None)
    Traceback (most recent call last):
        ...
    TypeError: none must be an integer

### **Test with a boolean (should fail but might pass due to Python treating booleans as integers)**  
    >>> bg.integer_validator("boolean", True)
    Traceback (most recent call last):
        ...
    TypeError: boolean must be an integer

    >>> bg.integer_validator("boolean", False)
    Traceback (most recent call last):
        ...
    TypeError: boolean must be an integer


### **Test with two strings (should fail)**  
    >>> bg.integer_validator("first", "hello")
    Traceback (most recent call last):
        ...
    TypeError: first must be an integer

    >>> bg.integer_validator("second", "world")
    Traceback (most recent call last):
        ...
    TypeError: second must be an integer

